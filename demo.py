from ems_utils.EMSEnvUR5 import EMSEnv
from robot_utils import Robot
from ems_utils.components import Cube
import random
import numpy as np
import time
'''item_se_list = [[(52, 42.5, 21), (43.5, 42.5, 30), (43, 41.5, 20), (42.5, 42.5, 39.5), (51, 42, 40), (42.5, 42.5, 39.5), (42, 32.5, 30), (51, 42, 40), (52, 43, 30.5), (43, 41, 30.5), (52, 43, 30.5), (42, 32.5, 30), (52, 42.5, 21), (51, 33, 20.5), (51, 33, 20.5), (43.5, 42.5, 30), (52, 42.5, 21), (52, 42.5, 21), (52, 42, 30), (52, 42.5, 21), (38, 37, 20), (51, 33, 20.5), (51, 42, 40), (43, 41, 30.5), (36.5, 32.5, 20.5), (43.5, 42.5, 30), (43.5, 42.5, 30)] 
,[(52, 42.5, 21), (43, 41, 30.5), (52, 33, 30), (52, 42, 30), (43, 41.5, 20), (51, 42, 40), (42.5, 41.5, 40), (52, 42.5, 21), (42, 32, 30), (52, 42, 
30), (43.5, 42.5, 30), (43, 41.5, 20), (52, 42.5, 21), (52, 43, 30.5), (52, 42.5, 21), (52, 42.5, 21), (52, 42.5, 21), (52, 42.5, 21), (43, 41.5, 20), (43, 41, 30.5), (52, 42.5, 21), (51, 42, 40), (52, 42, 30), (36.5, 32.5, 20.5), (42, 32.5, 30), (52, 42.5, 21), (52, 43, 30.5), (43, 41.5, 20)]
,[(52, 33, 30), (52, 33, 30), (52, 42.5, 21), (43.5, 42.5, 30), (42.5, 42.5, 39.5), (51, 42, 40), (43, 41.5, 20), (36.5, 32.5, 20.5), (42.5, 41.5, 40), (52, 42, 30), (42, 32.5, 30), (51, 33, 20.5), (42.5, 42.5, 39.5), (51, 33, 20.5), (52, 42.5, 21), (43, 41, 30.5), (51, 42, 40), (42.5, 41.5, 40), (52, 33, 30), (42, 32, 30), (51, 42, 40), (52, 42, 30), (51, 42, 40), (43, 41.5, 20), (51, 42, 40), (51, 32.5, 30), (43, 41.5, 20), (51, 32.5, 30)]
,[(52, 42.5, 21), (43, 41, 30.5), (43.5, 42.5, 30), (42.5, 42.5, 39.5), (42, 32, 30), (42.5, 42.5, 39.5), (52, 42.5, 21), (36.5, 32.5, 20.5), (38, 37, 20), (43.5, 42.5, 30), (43, 41.5, 20), (52, 33, 30), (36.5, 32.5, 20.5), (43.5, 42.5, 30), (42.5, 42.5, 39.5), (36.5, 32.5, 20.5), (38, 37, 20), (42.5, 41.5, 40), (51, 42, 40), (42.5, 42.5, 39.5), (51, 32.5, 30), (42, 32, 30), (52, 33, 30), (52, 43, 30.5), (52, 42.5, 21), (51, 42, 40), (43, 41, 30.5), (51, 32.5, 30)]
,[(42, 32.5, 30), (42, 32.5, 30), (42, 32.5, 30), (51, 42, 40), (52, 42.5, 21), (52, 33, 30), (42, 32.5, 30), (43, 41, 30.5), (51, 32.5, 30), (43, 41.5, 20), (42.5, 41.5, 40), (38, 37, 20), (38, 37, 20), (52, 42, 30), (42, 32, 30), (42, 32, 30), (43, 41, 30.5), (52, 33, 30), (52, 42.5, 21), (42, 
32, 30), (52, 43, 30.5), (43, 41.5, 20), (43, 41.5, 20), (42, 32.5, 30), (51, 33, 20.5), (43, 41, 30.5), (38, 37, 20), (51, 32.5, 30), (43, 41, 30.5), (52, 33, 30), (42, 32.5, 30), (38, 37, 20)]
,[(43, 41, 30.5), (43.5, 42.5, 30), (43.5, 42.5, 30), (52, 42.5, 21), (43.5, 42.5, 30), (43, 41.5, 20), (52, 42.5, 21), (51, 32.5, 30), (43, 41.5, 20), (36.5, 32.5, 20.5), (42, 32, 30), (52, 42.5, 21), (51, 33, 20.5), (43.5, 42.5, 30), (43, 41.5, 20), (42, 32.5, 30), (51, 42, 40), (51, 32.5, 30), (52, 42, 30), (52, 42.5, 21), (52, 42.5, 21), (52, 42.5, 21), (38, 37, 20), (42.5, 41.5, 40), (51, 32.5, 30), (51, 33, 20.5), (42, 32, 30), (36.5, 
32.5, 20.5), (43, 41, 30.5)]]'''
item_size_set = [(43, 41, 30.5), (43.5, 42.5, 30), (43.5, 42.5, 30), (52, 42.5, 21), (43.5, 42.5, 30), (43, 41.5, 20), (52, 42.5, 21), (51, 32.5, 30), (43, 41.5, 20), (36.5, 32.5, 20.5), (42, 32, 30), (52, 42.5, 21), (51, 33, 20.5), (43.5, 42.5, 30), (43, 41.5, 20), (42, 32.5, 30), (51, 42, 40), (51, 32.5, 30), (52, 42, 30), (52, 42.5, 21), (52, 42.5, 21), (52, 42.5, 21), (38, 37, 20), (42.5, 41.5, 40), (51, 32.5, 30), (51, 33, 20.5), (42, 32, 30), (36.5, 
32.5, 20.5), (43, 41, 30.5)]
#cube_size_list = [[50,50,50]]
def main():
    workspace_limits = np.asarray([[0.3, 0.748], [-0.224, 0.224], [-0.255, -0.1]])
    ur = Robot(workspace_limits)
    #都用cm表示
    env = EMSEnv(bin_size=[150,150,100])
    env.reset()
    reset_position = np.array([0.2, 0.7, 1,  0.70710641, -0.70710641,  0.,          0.00101927])
    ur.move_to_position(reset_position)
    #for i, i_size in enumerate(cube_size_list):
    i = 0
    while True:
        i = i + 1
        #i_size = random.choice(cube_size_list)
        i_size = item_size_set[i -1]
        cube_size = i_size
        cube = Cube(cube_size)
        action, _, _, info = env.step(cube.size)
        print(action[3])
        if action is None:
            break
        if action[3] == 1:
            ur.add_objects([i_size[0]/100, i_size[1]/100, i_size[2]/100], [-0.5, 8, 0.47+i_size[2]/100+0.2], 'item{}'.format(i))
            ur.set_object_position_by_name('item{}'.format(i),[0.4,-1.5, 0.47+i_size[2]/100+0.1],[0, 0, 90/180.0*np.pi])
        else:
            ur.add_objects([i_size[1]/100, i_size[0]/100, i_size[2]/100], [-0.5, 8, 0.47+i_size[2]/100+0.2], 'item{}'.format(i))
            ur.set_object_position_by_name('item{}'.format(i),[0.4,-1.5, 0.47+i_size[2]/100+0.1],[0, 0, 90/180.0*np.pi])
        ur.move_to_position([0.4, -1.5, 0.47+i_size[2]/100.+0.2,  0.70710641, -0.70710641,  0.,          0.00101927])
        ur.move_to_position([0.4, -1.5, 0.47+i_size[2]/100.,  0.70710641, -0.70710641,  0.,          0.00101927])
        ur.control_suctionPad('open')
        ur.move_to_position([0.4, -1.5, 1.5,  0.70710641, -0.70710641,  0.,          0.00101927])
        
        
        plac_pos = action[0:3]
        bin_start_pos = [1.55, -0.75, 0.102]
        # bin_y = -plac_pos[0]/100 + bin_start_pos[1]
        # bin_x = bin_start_pos[0] + plac_pos[1]/100.0 # action[1]/100.0 + (0.2)
        bin_y = +plac_pos[0]/100.0 + bin_start_pos[1]
        bin_x = bin_start_pos[0] - plac_pos[1]/100.0 # action[1]/100.0 + (0.2)
        bin_z = bin_start_pos[2] + plac_pos[2]/100.0
        #print(plac_pos)
        #print(bin_x, bin_y, bin_z)
        ur.move_to_position([bin_x, bin_y, 2.,  0.70710641, -0.70710641,  0.,          0.00101927])
        ur.move_to_position([bin_x, bin_y, bin_z,  0.70710641, -0.70710641,  0.,          0.00101927])
        ur.control_suctionPad('close')
        ur.move_to_position([bin_x, bin_y, 2.,  0.70710641, -0.70710641,  0.,          0.00101927])
    # cube_size = [real_w, real_h, real_z]
    # cube = Cube(cube_size)#(preset_list[index])
    # action, _, _, info = env.step(cube.size)
    #ur.set_object_position_by_name('item1',[item_drop_pos[0],item_drop_pos[1], float(item.depth)/100/2 +0.1],[0, 0, 90/180.0*np.pi])
if __name__ == '__main__':
    main()

